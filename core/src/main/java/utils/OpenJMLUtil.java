package utils;

import core.VerilyContainer;
import exceptions.VerilyCompileFailedException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import utils.openjml.Prover;
import utils.openjml.ProverConfigurationException;
import utils.openjml.Strings;
import utils.openjml.Z3Prover;
import utils.openjml.ui.ConfigureSMTProversDialog;
import utils.openjml.ui.MessageUtil;
import utils.openjml.ui.res.ApplicationMessages;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.Properties;

/**
 * Author: John L. Singleton <jsinglet@gmail.com>
 */
public class OpenJMLUtil {

    protected final static Logger logger = LoggerFactory.getLogger(OpenJMLUtil.class);


    public static String genDir = ".verily/gen/src";

    public static void preJML() throws IOException {
        // create a properties file for openjml
        configureProvers();

    }


    public static String racCompileProject() throws IOException, InterruptedException, VerilyCompileFailedException {


        Process p;
        StringBuffer sb = new StringBuffer();

        if(System.getProperty("os.name").startsWith("Windows"))
            p = new ProcessBuilder("mvn.bat", "package").redirectErrorStream(true).start();
        else
            p = new ProcessBuilder("mvn", "package").redirectErrorStream(true).start();

        InputStream is = p.getInputStream();

        InputStreamReader isr = new InputStreamReader(is);

        int c = isr.read();

        while (c != -1) {
            sb.append(c);
            c = isr.read();
        }

        is.close();

        int exitStatus = p.waitFor();


        if (exitStatus != 0) {
            throw new VerilyCompileFailedException("Building project failed. Please see output for details.");
        }
        return sb.toString();
    }




    public static File configureProvers() throws IOException {

        logger.info(MessageUtil
                .getMessage(ApplicationMessages.ApplicationMessageKey.MsgStartingConfiguration));

        Prover p;

        if(System.getProperty("os.name").startsWith("Windows"))
            p = new Z3Prover(VerilyContainer.getContainer().getEnv().getZ3Home() + "bin/z3.exe");
        else
            p = new Z3Prover(VerilyContainer.getContainer().getEnv().getZ3Home() + "bin/z3");


        Properties properties = new Properties();

        //
        // Two kinds of persistence may be requested, USER, and PROJECT.
        //
        File existingFile = getProjectPropertiesFile();

        //
        // If the selected destination file exists, merge the existing settings
        //
        if(existingFile.exists()){
            FileInputStream fis = new FileInputStream(existingFile);
            properties.load(fis);
            fis.close();
        }

        //
        // This is the minimal set of settings required for the static checker.
        //
        properties.setProperty(Strings.defaultProverProperty,p.getPropertiesName());
        properties.setProperty(Strings.proverPropertyPrefix + p.getPropertiesName(), p.getExecutable());

        //
        // Write it out to an options file
        //

        FileOutputStream os = new FileOutputStream(existingFile);
        properties.store(os, "This file was generated by the Verily Web Framework.");

        os.close();

        return existingFile;
    }


    /**
     * Gets the openjml.properties file in the user's home directory.
     *
     * @return A new File object pointing to the openjml.properties file in the user's home directory.
     */
    public static File getUserPropertiesFile()
    {
        return new File(System.getProperty("user.home") + "/" + Strings.propertiesFileName);
    }

    /**
     * Gets the openjml.properties file in the current working directory.
     *
     * @return A new File object pointing to the openjml.properties file in the current working directory.
     */
    public static File getProjectPropertiesFile()
    {
        return new File(System.getProperty("user.dir") + "/" + Strings.propertiesFileName);
    }
    /** Finds OpenJML properties files in pre-defined places, reading their
     * contents and loading them into the System property set.
     */
    public static Properties findProperties() {

        Properties properties = System.getProperties();
        // Load properties files found in these locations:
        // These are read in inverse order of priority, so that later reads
        // overwrite the earlier ones.


        // In the user's home directory
        {
            File f = getUserPropertiesFile();
            try {
                readProps(properties,f);
                logger.trace("Properties read from user's home directory: " + f.getAbsolutePath());

            } catch (java.io.IOException e) {
                logger.trace("Failed to read property file " + f.getAbsolutePath());
            }
        }

        // In the working directory
        {
            File f = getProjectPropertiesFile();
            try {
                readProps(properties,f);

               logger.trace("Properties read from working directory: " + f.getAbsolutePath());

            } catch (java.io.IOException e) {
                logger.trace("Failed to read property file " + f.getAbsolutePath());
            }
        }


        return properties;
    }

    /**
     * Reads the properties into the given properties object.
     *
     * @param properties The properties to read into
     * @param f The file to read from
     * @throws java.io.IOException Thrown if the file can't be found or can't be read.
     */
    public static void readProps(Properties properties, File f) throws java.io.IOException {
        properties.load(new FileInputStream(f));
    }

}
